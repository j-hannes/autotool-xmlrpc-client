module Autotool.Mock
  ( getInitialTaskConfig
  , submitTaskConfig
  , getTaskInstance
  , submitSolution
  , getTaskTypes
  ) where

import           Autotool.XmlRpc.Types.ScoringOrder
import           Autotool.XmlRpc.Types.TaskTree

type LinkMap = [(String, String)]

getInitialTaskConfig :: IO (String, LinkMap, ScoringOrder)
getInitialTaskConfig = return (config, linkMap, Increasing)
  where
    config = "( Convert\n      { name = Nothing\n      , input = Exp\n    " ++
             "                a (a + b)^* b\n      }\n, [ Sane\n  , Min_Si" ++
             "ze\n        4\n  , Max_Size\n        6\n  , Alphabet\n      " ++
             "  (mkSet \"ab\")\n  ]\n)"
    linkMap = [
        ("Convert.Type.Convert"
        ,"http://autolat.imn.htwk-leipzig.de/haddock/world/Convert-Type.html#t%3AConvert")
      , ("NFA.Property.Property"
        ,"http://autolat.imn.htwk-leipzig.de/haddock/world/NFA-Property.html#t%3AProperty")
      , ("Char"
        ,"http://autolat.imn.htwk-leipzig.de/haddock/world/GHC-Types.html#t%3AChar")
      ]


submitTaskConfig :: Bool -> IO (Either String String)
submitTaskConfig True  = return $ Right "5369676e6564207b636f6e74656e7473203d202822436f6e766572745f546f5f4e46412d446972656374222c222820436f6e766572745c6e2020202020207b206e616d65203d204e6f7468696e675c6e2020202020202c20696e707574203d204578705c6e202020202020202020202020202020202020202061202861202b2062295e2a20625c6e2020202020207d5c6e2c205b2053616e655c6e20202c204d696e5f53697a655c6e2020202020202020345c6e20202c204d61785f53697a655c6e2020202020202020365c6e20202c20416c7068616265745c6e2020202020202020286d6b536574205c2261625c22295c6e20205d5c6e2922292c207369676e6174757265203d202263663037376631376263353639356132636461363863353163333839396332653465383836383032227d"
submitTaskConfig False = return $ Left "( Convert      { name = Nothing      , input = Exp                    a (a + b)^* b      }, [ Sane  , Min_Size        4  , Max_Size        6  , Alph\n................................................................................................................................................\n\nfalsches Zeichen: \"A\"\nm\246glich ist hier: \"Sane\", \"Min_Size\", \"Max_Size\", \"Alphabet\", \"Deterministic\", \"Non_Deterministic\", \"Minimal\", \"Complete\", \"Reduced\" oder \"(\"\n--------------------------------------------------------------------------------\n\n"


getTaskInstance :: IO (String, String, LinkMap, String)
getTaskInstance = return (description, solution, doc, sig)
  where
    description = "Gesucht ist ein endlicher Automat,\nder die Sprache\n    die von diesem Ausdruck erzeugte Sprache:\n        a (a + b)^* b\nakzeptiert und folgende Eigenschaften hat:\n    [ Sane\n    , Min_Size\n          4\n    , Max_Size\n          6\n    , Alphabet\n          (mkSet \"ab\")\n    ]\n\n"
    solution = "NFA\n    { alphabet = mkSet \"ab\" , states = mkSet [ 1 , 2 , 3 ]\n    , starts = mkSet [ 2 ] , finals = mkSet [ 2 ]\n    , trans = collect [ ( 1 , 'a' , 2 ) , ( 2 , 'a' , 1 )\n                      , ( 2 , 'a' , 3 ) , ( 2 , 'b' , 3 ) , ( 3 , 'b' , 2 )\n                      ]\n    }"
    doc = [
        ("Autolib.NFA.Data.NFA","http://autolat.imn.htwk-leipzig.de/haddock/world/Autolib-NFA-Data.html#t%3ANFA")
      , ("Char","http://autolat.imn.htwk-leipzig.de/haddock/world/GHC-Types.html#t%3AChar")
      , ("Int","http://autolat.imn.htwk-leipzig.de/haddock/world/GHC-Types.html#t%3AInt")
      ]
    sig = "5369676e6564207b636f6e74656e7473203d202822436f6e766572745f546f5f4e46412d446972656374222c496e7374616e6365207b746167203d2022436f6e766572745f546f5f4e46412d446972656374222c20636f6e74656e7473203d20222820436f6e76657274207b206e616d65203d204e6f7468696e67202c20696e707574203d204578702061202861202b2062295e2a2062207d202c205b2053616e65202c204d696e5f53697a652034202c204d61785f53697a652036202c20416c70686162657420286d6b536574205c2261625c2229205d2029227d292c207369676e6174757265203d202266323864323839656235633362336263336137313530363537633165646665376666366237366633227d"


submitSolution :: Bool -> IO (Either String String)
submitSolution True  = return $ Right "gelesen: 264\n\npartiell korrekt?\n\ndezimal(x) ist kein Palindrom?\n\n\n\nJa.\n\ntotal korrekt?\n\ndezimal (x^2) = 69696\n\nist Palindrom?\n\n\n\nJa.\n\nBewertung der Einsendung: Okay\n                              { punkte = 1 , size_ = 12 }\n\n"
submitSolution False = return $ Left "gelesen: 13\n\npartiell korrekt?\n\ndezimal(x) ist kein Palindrom?\n\n\n\nJa.\n\ntotal korrekt?\n\ndezimal (x^2) = 169\n\nist Palindrom?\n\n\n\nNein.\n\nBewertung der Einsendung: No\n\n"


getTaskTypes :: IO [TaskTree]
getTaskTypes = return $ read "[Category {categoryName = \"Automaten und Formale Sprachen\", subTrees = [Category {categoryName = \"endliche Automaten\", subTrees = [Task {taskName = \"Convert_To_NFA-Direct\"},Task {taskName = \"Convert_To_NFA-Quiz\"},Task {taskName = \"Equiv-Direct\"},Task {taskName = \"Equiv-Quiz\"},Task {taskName = \"DFA_Compress-Direct\"},Task {taskName = \"DFA_Compress-Quiz\"}]},Category {categoryName = \"regulaere Ausdruecke\", subTrees = [Task {taskName = \"Convert_To_Exp-Direct\"},Task {taskName = \"Convert_To_Exp-Quiz\"},Task {taskName = \"Exp_Smaller-Direct\"},Task {taskName = \"Exp_Shortest_Missing-Direct\"}]},Category {categoryName = \"Grammatiken (neu)\", subTrees = [Task {taskName = \"CFG2-Direct\"},Task {taskName = \"Acceptor-Grammatik-Quiz\"}]},Category {categoryName = \"Grammatiken (veraltet)\", subTrees = [Task {taskName = \"CFG-Quiz\"}]},Category {categoryName = \"Kellerautomaten (neu)\", subTrees = [Task {taskName = \"Acceptor-NPDA-Direct\"}]},Category {categoryName = \"Kellerautomaten (veraltet)\", subTrees = [Task {taskName = \"Acceptor-NPDA-Quiz\"}]},Category {categoryName = \"Pumping-Lemma (neu)\", subTrees = [Task {taskName = \"PUMP-REG-Direct\"},Task {taskName = \"PUMP-CF-Direct\"}]},Category {categoryName = \"Pumping-Lemma (veraltet)\", subTrees = [Task {taskName = \"PUMP-REG-Quiz\"},Task {taskName = \"PUMP-CF-Quiz\"}]},Category {categoryName = \"Nerode-Kongruenz\", subTrees = [Task {taskName = \"Nerode_Congruent-Direct\"},Task {taskName = \"Nerode_Congruent-Quiz\"},Task {taskName = \"Nerode_Incongruent-Direct\"},Task {taskName = \"Nerode_Incongruent-Quiz\"},Task {taskName = \"Nerode_Separation-Direct\"}]},Category {categoryName = \"Turing-Maschine (als Akzeptor)\", subTrees = [Task {taskName = \"Acceptor-Turing-Quiz\"}]}]},Category {categoryName = \"Logik\", subTrees = [Category {categoryName = \"Aussagenlogik\", subTrees = [Category {categoryName = \"Umformen (neu)\", subTrees = [Task {taskName = \"Boolean2-Direct\"},Task {taskName = \"Boolean2-Quiz\"}]},Category {categoryName = \"Umformen (alt)\", subTrees = [Task {taskName = \"Boolean-Direct\"},Task {taskName = \"Boolean-Quiz\"}]},Task {taskName = \"CNF_SAT-Direct\"},Task {taskName = \"CNF_SAT-Quiz\"},Task {taskName = \"CNF_Optimize-Direct\"},Task {taskName = \"Hilbert-Direct\"},Task {taskName = \"Resolution-Direct\"},Task {taskName = \"Resolution-Quiz\"}]},Category {categoryName = \"Praedikatenlogik\", subTrees = [Task {taskName = \"Find_Model-Direct\"}]}]},Category {categoryName = \"Mengen und Relationen\", subTrees = [Task {taskName = \"Algebraic_Set-Direct\"},Task {taskName = \"Algebraic_Set-Quiz\"},Task {taskName = \"Algebraic_Relation-Direct\"},Task {taskName = \"Algebraic_Relation-Quiz\"}]},Category {categoryName = \"Kombinatorik\", subTrees = [Task {taskName = \"PCProblem-Quiz\"},Task {taskName = \"PCProblem-Direct\"},Category {categoryName = \"Ramsey-Theorie\", subTrees = [Task {taskName = \"Ramsey-Direct\"},Task {taskName = \"Van_der_Waerden-Direct\"}]},Category {categoryName = \"Lunar Lockout (original)\", subTrees = [Task {taskName = \"Robots-Direct\"},Task {taskName = \"Robots-Quiz\"},Task {taskName = \"Robots_Inverse-Direct\"},Task {taskName = \"Robots_Inverse-Quiz\"}]},Category {categoryName = \"Solar Lockout (modified)\", subTrees = [Task {taskName = \"Robots3-Direct\"},Task {taskName = \"Robots3-Quiz\"},Task {taskName = \"Robots3_Inverse-Direct\"},Task {taskName = \"Robots3_Inverse-Quiz\"},Task {taskName = \"Rushhour-Direct\"}]},Task {taskName = \"Hanoi-Direct\"},Task {taskName = \"Hanoi-Quiz\"},Category {categoryName = \"lange gemeinsame Teilfolge\", subTrees = [Task {taskName = \"LCS-Direct\"},Task {taskName = \"LCS-Quiz\"}]},Category {categoryName = \"kurze gemeinsame Superfolge\", subTrees = [Task {taskName = \"SCS-Direct\"},Task {taskName = \"SCS-Quiz\"}]}]},Category {categoryName = \"Berechnungsmodelle\", subTrees = [Task {taskName = \"Machine.Numerical.JVM\"},Task {taskName = \"Machine.Numerical.Turing-Maschine (als Computer)\"},Task {taskName = \"Cexp-Direct\"},Category {categoryName = \"Programme mit Arrays\", subTrees = [Task {taskName = \"Program_Array-Direct\"},Task {taskName = \"Program_Array-Quiz\"}]},Category {categoryName = \"Programme mit Listen, Stacks, Queues\", subTrees = [Category {categoryName = \"Programme mit Listen\", subTrees = [Task {taskName = \"Program_List-Direct\"},Task {taskName = \"Program_List-Quiz\"}]}]},Category {categoryName = \"Primitiv rekursive Funktionen (neu)\", subTrees = [Task {taskName = \"Primrec_2D-Direct\"},Task {taskName = \"Primrec_2D-Quiz\"}]},Category {categoryName = \"Primitiv rekursive Funktionen (alt)\", subTrees = [Task {taskName = \"Machine.Numerical.Fun\"},Task {taskName = \"Fun_Quiz2-Quiz\"}]},Task {taskName = \"Machine.Numerical.RAM\"},Task {taskName = \"Machine.Numerical.RM\"},Task {taskName = \"Machine.Numerical.Brainfuck-Maschine (als Computer)\"}]},Category {categoryName = \"Terme, Ersetzungssysteme\", subTrees = [Category {categoryName = \"Wortersetzung\", subTrees = [Task {taskName = \"Derive-For_SRS-Direct\"}]},Category {categoryName = \"Termersetzung\", subTrees = [Task {taskName = \"Derive-For_TRS-Direct\"},Task {taskName = \"Derive-Quiz\"},Task {taskName = \"Machine.Numerical.TRS\"}]},Category {categoryName = \"Lambda-Kalkuel\", subTrees = [Task {taskName = \"Derive-For_Lambda-Direct\"}]},Category {categoryName = \"Kombinatorische Logik\", subTrees = [Task {taskName = \"Combinatory_Logic_Find-Direct\"}]},Category {categoryName = \"Unifikation\", subTrees = [Task {taskName = \"Unify-Direct\"},Task {taskName = \"Unify-Quiz\"}]}]},Category {categoryName = \"Lambda-Kalkuel\", subTrees = [Task {taskName = \"Lambda_Derive-Direct\"},Task {taskName = \"Lambda_Derive-Quiz\"},Task {taskName = \"Lambda_Backward_Join-Direct\"}]},Category {categoryName = \"Kombinatorische Logik\", subTrees = [Task {taskName = \"Combinatory_Logic_Find-Direct\"}]},Category {categoryName = \"Graphen\", subTrees = [Task {taskName = \"Selfcom-Direct\"},Task {taskName = \"Cross-Direct\"},Task {taskName = \"Ramsey-Direct\"},Task {taskName = \"MinSep-Direct\"},Task {taskName = \"Col-Direct\"},Task {taskName = \"Col-Quiz\"},Task {taskName = \"Greedy_Col-Direct\"},Task {taskName = \"Col_Gadget-Direct\"},Task {taskName = \"Graceful-Direct\"},Task {taskName = \"TreeWidth-Direct\"},Task {taskName = \"PartialKTree-Direct\"},Task {taskName = \"PartialKTree-Quiz\"},Task {taskName = \"Bi-Quiz\"},Task {taskName = \"Bi-Direct\"},Task {taskName = \"Circle-Quiz\"},Task {taskName = \"Circle-Direct\"},Task {taskName = \"Bisect-Direct\"},Task {taskName = \"Bisect-Quiz\"},Task {taskName = \"Way-Direct\"},Task {taskName = \"Way-Quiz\"},Task {taskName = \"MST-Direct\"},Task {taskName = \"MST-Quiz\"},Task {taskName = \"TSP-Direct\"},Task {taskName = \"TSP-Quiz\"},Task {taskName = \"Hamilton-Direct\"},Task {taskName = \"Hamilton-Quiz\"},Category {categoryName = \"Graphoperationen\", subTrees = [Task {taskName = \"Algebraic_Graph-Direct\"},Task {taskName = \"Algebraic_Graph-Quiz\"},Task {taskName = \"Algebraic_STGraph-Direct\"},Task {taskName = \"Algebraic_STGraph-Quiz\"}]}]},Category {categoryName = \"Programmierung\", subTrees = [Task {taskName = \"TypeCheck-Direct\"},Task {taskName = \"TypeCheck-Quiz\"},Task {taskName = \"FPTypeCheck-Direct\"},Task {taskName = \"FPTypeCheck-Quiz\"},Task {taskName = \"Goto_To_Struct-Direct\"},Task {taskName = \"Struct_To_Goto-Direct\"},Task {taskName = \"Specify-Direct\"}]},Category {categoryName = \"Algorithmen\", subTrees = [Category {categoryName = \"Sortiernetze\", subTrees = [Task {taskName = \"Sortier-Direct\"},Task {taskName = \"Merge_Netz-Direct\"},Task {taskName = \"Median_Netz-Direct\"}]},Category {categoryName = \"Sortierprogramme\", subTrees = [Task {taskName = \"Sortier_Programm-Direct\"}]},Category {categoryName = \"String-Matching\", subTrees = [Task {taskName = \"String_Matching_KMP-Direct\"},Task {taskName = \"String_Matching_KMP-Quiz\"},Task {taskName = \"String_Matching_BM-Direct\"},Task {taskName = \"String_Matching_BM-Quiz\"}]}]},Category {categoryName = \"Datenstrukturen\", subTrees = [Category {categoryName = \"Baeume\", subTrees = [Task {taskName = \"Reconstruct-Direct\"},Task {taskName = \"Reconstruct-Quiz\"},Task {taskName = \"SuchbaumBinary-Quiz\"},Task {taskName = \"SuchbaumAVL-Quiz\"},Task {taskName = \"SuchbaumRedBlack-Quiz\"},Task {taskName = \"SuchbaumZweiDrei-Quiz\"}]},Category {categoryName = \"Programme mit Arrays\", subTrees = [Task {taskName = \"Program_Array-Direct\"},Task {taskName = \"Program_Array-Quiz\"}]},Category {categoryName = \"Programme mit Listen\", subTrees = [Task {taskName = \"Program_List-Direct\"},Task {taskName = \"Program_List-Quiz\"}]}]},Category {categoryName = \"Zahlensysteme\", subTrees = [Task {taskName = \"Convert-Direct\"},Task {taskName = \"Convert-Quiz\"},Task {taskName = \"From_Float-Direct\"},Task {taskName = \"From_Float-Quiz\"},Task {taskName = \"To_Float-Direct\"},Task {taskName = \"To_Float-Quiz\"}]},Category {categoryName = \"Zahlentheorie\", subTrees = [Task {taskName = \"Collatz_Plain-Direct\"},Task {taskName = \"Collatz_Plain-Quiz\"},Task {taskName = \"Collatz_Inverse-Direct\"},Task {taskName = \"Collatz_Inverse-Quiz\"},Task {taskName = \"Collatz_Long-Direct\"},Task {taskName = \"Times-Direct\"},Task {taskName = \"Times-Quiz\"},Task {taskName = \"Faktor-Direct\"},Task {taskName = \"Faktor-Quiz\"},Task {taskName = \"Euklid-Direct\"},Task {taskName = \"Euklid-Quiz\"},Task {taskName = \"Inverse-Direct\"},Task {taskName = \"Inverse-Quiz\"}]},Category {categoryName = \"Codierung, Kompression, Verschluesselung\", subTrees = [Category {categoryName = \"Codierung\", subTrees = [Task {taskName = \"Nonprefix-Direct\"},Task {taskName = \"Nocode-Direct\"},Task {taskName = \"Nocode-Quiz\"},Task {taskName = \"Huffman-Direct\"},Task {taskName = \"Huffman-Quiz\"},Task {taskName = \"Encode-Burrows_Wheeler-Direct\"},Task {taskName = \"Decode-Burrows_Wheeler-Direct\"},Task {taskName = \"Encode-Move_To_Front-Quiz\"},Task {taskName = \"Encode-Burrows_Wheeler-Quiz\"},Task {taskName = \"Decode-Move_To_Front-Quiz\"},Task {taskName = \"Decode-Burrows_Wheeler-Quiz\"},Task {taskName = \"Hamming-Direct\"}]},Category {categoryName = \"Kompression\", subTrees = [Task {taskName = \"Compress-Lempel_Ziv_Welch-Quiz\"},Task {taskName = \"Compress-Lempel_Ziv_77-Quiz\"},Task {taskName = \"Compress-Lempel_Ziv_77-Direct\"}]},Category {categoryName = \"Verschluesselung\", subTrees = [Task {taskName = \"RSA_Code_Break-Direct\"},Task {taskName = \"RSA_Code_Break-Quiz\"},Task {taskName = \"Diffie_Hellman_Code_Break-Direct\"},Task {taskName = \"Diffie_Hellman_Code_Break-Quiz\"}]}]},Category {categoryName = \"NP-vollstaendige Probleme\", subTrees = [Task {taskName = \"Binpack-Direct\"},Task {taskName = \"Binpack-Quiz\"},Task {taskName = \"Binpack_FFD-Direct\"},Task {taskName = \"Partition-Direct\"},Task {taskName = \"CNF_SAT-Direct\"},Task {taskName = \"CNF_SAT-Quiz\"},Task {taskName = \"Partition-Quiz\"},Task {taskName = \"KnapsackFraction-Direct\"},Task {taskName = \"KnapsackFraction-Quiz\"},Task {taskName = \"VC-Direct\"},Task {taskName = \"VC-Quiz\"},Task {taskName = \"VCSAT-Direct\"},Task {taskName = \"VCSAT-Quiz\"}]},Category {categoryName = \"noch nicht eingeordnet\", subTrees = [Task {taskName = \"Palindrom-Direct\"}]},Category {categoryName = \"experimentell\", subTrees = [Task {taskName = \"Algebraic_Integer-Direct\"},Task {taskName = \"Algebraic_Integer-Quiz\"},Task {taskName = \"Algebraic_Graph-Direct\"},Task {taskName = \"Algebraic_Graph-Quiz\"},Task {taskName = \"Algebraic_STGraph-Direct\"},Task {taskName = \"Algebraic_STGraph-Quiz\"}]}]\n"
